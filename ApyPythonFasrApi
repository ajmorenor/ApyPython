# Generador
# *************************
import os
import time
from http.client import HTTPException

import requests
import json
import gc
import os
import openpyxl
import xlsxwriter
import xlrd
import xlwt
import xlutils
from xlrd import open_workbook
from xlutils.copy import copy

import subprocess
from zipfile import ZipFile
# *************************

import uvicorn
from fastapi import FastAPI, status
from fastapi.responses import FileResponse, JSONResponse

app = FastAPI()


@ app.get("/download/{filename}")
def download_file(filename: str):  # async ?
    # Ruta del archivo que deseas descargar
    file_path = os.path.join("./generados/", filename)

    # Verificar si el archivo existe
    if os.path.exists(file_path):
        print("[INFO] El archivo a descargar existe...")
        return FileResponse(file_path)
    else:
        print("[DEBUG] El archivo a descargar NO existe...")
        raise HTTPException(status_code=404, detail="Archivo no encontrado")
        #return JSONResponse(status_code=404)

@app.get("/generar_archivos_automaticamente")
async def generar_archivos_automaticamente():
    """Genera archivos automáticamente sin interfaz gráfica."""
    return_generador = "Ok"

    print("[DEBUG] Ejecutando generar_archivos_automaticamente()...")
    ruta_carpeta_niveles = r"./niveles"  # Ajusta la ruta si corresponde

    if not os.path.exists(ruta_carpeta_niveles):
        print(f"[ERROR] La carpeta de niveles no existe: {ruta_carpeta_niveles}")
        return_generador = "nOkE"  # return

    registros = obtener_compras()
    if not registros:
        print("[INFO] No hay registros para procesar (lista vacía).")
        return_generador = "nOkR"  # return
    else:
        actualizar_modulo_vba_y_guardar(ruta_carpeta_niveles, registros)

    return {"resultado": return_generador}  # return_generador  # print("[INFO] Proceso de generación completado.")
